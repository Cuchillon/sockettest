plugins {
    id 'io.qameta.allure' version '2.8.1'
    id 'java'
}

group 'com.ferick'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

allure {
    autoconfigure = true
    aspectjweaver = true
    version = '2.13.6'
    clean = true
    useJUnit5 {
        version = '2.13.6'
    }
}

dependencies {
    implementation 'org.apache.commons:commons-configuration2:2.7'
    implementation 'javax.inject:javax.inject:1'
    implementation 'io.qameta.allure:allure-junit5:2.17.3'
    implementation 'commons-beanutils:commons-beanutils:1.9.4'
    implementation 'commons-io:commons-io:2.8.0'
    implementation 'org.yaml:snakeyaml:1.30'
    implementation 'org.junit.jupiter:junit-jupiter-params:5.8.2'
    implementation 'com.squareup.okhttp3:okhttp:4.9.3'
    implementation 'com.google.code.gson:gson:2.9.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
    runtime 'org.aspectj:aspectjweaver:1.9.8'
}

test {
    def props = ['common.baseUrl']
    jvmArgs += loadProperties(props)
    def tagString = project.hasProperty('tags') ? project.tags : ''
    String[] tags = !tagString.isEmpty() ? tagString.split(',') : []
    useJUnitPlatform {
        if (tags.size() > 0) {
            includeTags(tags)
        }
    }
}

def loadProperties(List<String> properties) {
    def args = []
    properties.forEach({
        def value = findProperty(it) ?: ''
        if (value != '') {
            args.add("-D${it}=${value}")
        }
    })
    return args
}